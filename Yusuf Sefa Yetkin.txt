OPP Matlap Kursu Final Sınavı
*MODULE1*:
 Custom Data Types for an Orienteering System
Using Objects to Simulate an Event 

Task 1   
course fonksiyonunu kullanarak "Family Fun" isimli, "White" zorluk  seviyesinde ve vektör w'de depolanan rotanoktalarıyla bir kurs nesnesi olan c oluşturun.
ACIKLAMA: "Family Fun" adında, "White" zorluk seviyesinde ve w vektöründe bulunan rotanoktalarıyla bir oryantiring kursu oluşturur. Oluşturulan kurs nesnesi c değişkenine atanır.
Task 1   

c = course("Family Fun","White",w)
Task 2 
idstick fonksiyonunu kullanarak 123456 seri numarasına sahip bir ID stick nesnesi olan id'yi oluşturun.
ACIKLAMA:123456 seri numarasına sahip bir ID stick nesnesi oluşturur ve bu nesneyi id değişkenine atar
Task 2   
id = idstick(123456)
Task 3
Çalışma alanınızdaki değişkenlerin boyutlarını ve tiplerini görmek için whos komutunu kullanın.
ACIKLAMA: çalışma alanınızı gözden geçirmenizi ve mevcut değişkenlerin durumu hakkında bilgi edinmenizi sağlar.
Task 3   
whos
Task 4
id nesnesinin özelliklerinin ve metodlarının isimlerini görmek için properties ve methods fonksiyonlarını kullanın.
ACIKLAMA:bir nesnenin içeriği ve kullanılabilir özellikleri ve metodları hakkında bilgi sağlar. Bu bilgi, nesnenin yapısını anlamak ve nasıl kullanılacağı hakkında fikir edinmek için kullanışlı olabilir.
Task 4   
properties(id)
methods(id)
Task 5
"Astrid"i, c ile temsil edilen "Family Fun" kursuna id ID stick'i kullanarak kaydetmek için register fonksiyonunu kullanın. id'yi bu çıktıyı atayarak güncelleyin.
ACIKLAMA: id adlı ID stick nesnesini kullanarak "Astrid" isimli bir kişiyi c adlı "Family Fun" kursuna kaydeder. Kayıt işlemi sonucunda id nesnesi güncellenir ve kayıt işlemi başarılı bir şekilde tamamlanırsa yeni bilgilerle güncellenmiş id nesnesi döner.
Task 5   
 id = register(id,"Astrid",c)
Task 6
Astrid'in ID stick'ini (id) 42 numaralı ilk rotanoktasında kontrol etmek için checkWaypoint fonksiyonunu kullanın. Çıktıyı id'ye atayarak id'yi güncelleyin. (Güncellenmiş görüntüyü görebilmek için satırın sonundaki noktalı virgülü kaldırabilirsiniz.)
ACIKLAMA: id adlı ID stick nesnesini kullanarak "Astrid" adlı kişinin 42 numaralı ilk rotanoktasında kaydının kontrol edilmesini sağlar. Eğer kaydı varsa, bu fonksiyon işlemi gerçekleştirir ve id nesnesini güncelleyerek bu bilgiyi içerir.
Task 6   
id = checkWaypoint(id,42)


*MODULE1*:
 Custom Data Types for an Orienteering System
Vectors of Custom Objects
Task 1 
"Insanity" isimli, "Red" zorluk seviyesinde ve w2 vektöründe bulunan rotanoktalarıyla yeni bir kurs nesnesi oluşturmak için course fonksiyonunu kullanın. Bu yeni kursu c'nin ikinci elemanı olarak saklamak için standart indeksleme kullanın.
ACIKLAMA:"Insanity" isimli, "Red" zorluk seviyesinde ve w2 vektöründe bulunan rotanoktalarıyla yeni bir kurs nesnesi oluşturur. Daha sonra bu yeni kurs nesnesini c dizisinin ikinci elemanına atar. Bu şekilde c dizisinin ikinci elemanı, "Insanity" kursunu temsil eder.
Task 2 
id adında, sırasıyla 123456, 567890 ve 987654 seri numaralarına sahip bir ID stick nesneleri dizisi oluşturmak için idstick fonksiyonunu kullanın.
ACIKLAMA:[123456, 567890, 987654] dizisindeki seri numaralarına sahip üç ID stick nesnesini içeren bir dizi oluşturur ve bu diziyi id değişkenine atar. Bu şekilde id değişkeni, üç ID stick nesnesini içeren bir diziye sahip olur.
Task 3 
"Astrid"i, c dizisinin ilk elemanı olan "Family Fun" kursuna, id dizisinin ilk elemanındaki ID stick nesnesini kullanarak kaydetmek için register fonksiyonunu kullanın. Bu işlem sonucunda elde edilen çıktıyı id(1) elemanına atayarak id(1) elemanını güncelleyin.
ACIKLAMA:id dizisinin ilk elemanındaki ID stick nesnesini kullanarak "Astrid" adlı kişiyi c dizisinin ilk elemanındaki "Family Fun" kursuna kaydeder. Kayıt işlemi başarılı bir şekilde tamamlandığında, güncellenmiş ID stick nesnesi id dizisinin ilk elemanına atanır.
Task 4
"Erik" adlı kişiyi "Family Fun" kursuna kaydetmek için register fonksiyonunu kullanın, ancak bu sefer kayıt için id dizisinin ikinci elemanındaki ID stick nesnesini kullanın. Kayıt işlemi başarılı bir şekilde tamamlandığında, güncellenmiş ID stick nesnesi id dizisinin ikinci elemanına atanır.
ACIKLAMA:id dizisinin ikinci elemanındaki ID stick nesnesini kullanarak "Erik" adlı kişiyi c dizisinin ilk elemanındaki "Family Fun" kursuna kaydeder. Kayıt işlemi başarılı bir şekilde tamamlandığında, güncellenmiş ID stick nesnesi id dizisinin ikinci elemanına atanır. Bu şekilde "Erik" adlı kişinin kaydı güncellenmiş olur.
Task 1   
c(2) = course("Insanity","Red",w2)
Task 2   
id = idstick([123456,567890,987654])
Task 3  
id(1) = register(id(1),"Astrid",c(1))
Task 4 
id(2) = register(id(2),"Erik",c(1))

*MODULE1*:
 Creating a New Class
Creating a Class Definition
Task 1 
course.m adlı dosyanın eksik olan sınıf tanım dosyasını düzenleyin ve aşağıdaki kodu kullanarak course adında bir sınıf tanımlayın. Dosyayı kaydetmek için Ctrl+S (macOS sistemlerinde Command+S) tuşlarını kullanın ve ardından gönderin.
ACIKLAMA:MATLAB'da bir sınıf tanımı başlatır. classdef anahtar kelimesi ile başlayan bu yapı, bir sınıfın temelini oluşturur. Bu sınıfın içeriği, course adlı bir sınıfın tanımlanması ile başlar ve içeriği daha sonra properties ve methods blokları ile doldurulabilir. Ancak verilen kodun içeriği eksik olduğu için, properties ve methods blokları eklenmeden önce bu kod tamamlanmalıdır.
Task 2 
checkCourse.mlx betik dosyasında bir course nesnesi olan c oluşturun.
ACIKLAMA:MATLAB'da course adında bir sınıfın örnek bir nesnesi olan c'yi oluşturur. Ancak, bu örnek nesne için gerekli olan parametrelerin eksik olduğunu belirtmek gerekir. Örnek bir nesne oluştururken, genellikle sınıfın kurucu fonksiyonunu kullanarak sınıfın özelliklerini başlatmak için gerekli parametreleri sağlamak gerekir.
Task 3 
course.m adlı sınıf tanım dosyasına aşağıdaki gibi bir özellik bloğu ekleyin. Bu özellik bloğu, sınıfın Name, Level ve Waypoints adında üç özelliğini tanımlar.
ACIKLAMA: sınıfın temel yapısını oluşturur ancak henüz sınıfa özel metotlar veya yapıcı fonksiyonlar içermez. Bu şekilde tanımlanan bir sınıf, özellikleri üzerinden veri saklamak ve bu verilere erişmek için kullanılabilir, ancak sınıfın işlevselliği henüz tanımlanmamıştır.
Task 4 
course.m adlı sınıf tanım dosyasına aşağıdaki gibi bir özellik bloğu ekleyin. Bu özellik bloğu, sınıfın Name, Level ve Waypoints adında üç özelliğini tanımlar.
ACIKLAMA: course sınıfından bir örnek oluşturur ve bu örneğin c adlı değişkene atanmasını sağlar. Daha sonra c'nin Level özelliğinin değerini lvl adlı bir değişkene atar. Ancak, course sınıfının kurucu fonksiyonu (course sınıfının yapıcı metodunu) çağırmak ve gerekli parametreleri sağlamak gereklidir
Task 1 
% Course class definition
classdef course
 
end
Task 2 
c = course
Task 3 
% Course class definition
classdef course
 properties
 Name
 Level
 Waypoints
 end
 
end
Task 4 
c = course
lvl = c.Level

% Bir Olayı Simüle Etmek İçin Nesneleri Kullanma 


 w = [42 123 124 163 168 666]; % Bu kod, etkileşimde kullanılmak üzere ara nokta sayılarından oluşan bir vektör oluşturur. 

Task 1 % Yeni bir nesneyi (değişken), bu üç girişi kullanarak course fonksiyonunu çağırarak oluşturulabilir. 
c = course("Family Fun","White",w)

Task 2 % Bir katılımcı bir nesne oluşturmak için bir ID kayıt ettiğinde, ID  birçok bilgiyi içerir ilk oluşturulduğunda genellikle boştur. 
% Bir ID çubuğunu temsil etmek için idstick fonksiyonunu, ID çubuğunun seri numarasını temsil eden tek bir girişle çağırarak bir nesne oluşturabilirsiniz.

id = idstick(123456)

Task 3 % Oluşturduğumuz değişkenler, course ve idstick adlı özel sınıfların nesneleridir. 
whos

Task 4 % Çalışma alanınızdaki bir nesnenin özelliklerinin (içerdikleri bilgilerin) isimlerini görmek için properties fonksiyonunu kullanabilirsiniz.
% Benzer şekilde, nesnenizle çalışan metodların (fonksiyonların) isimlerini görmek için methods fonksiyonunu kullanabilirsiniz.
properties(id)
methods(id)

Task 5 % ID  nesnelerinde "register" adında bir metod bulunmaktadır. Bu metod, bir katılımcının ID  ile bir nesneye kaydolmasını simüle eder. 
id = register(id,"Astrid",c)

Task 6 % ID  nesnelerinin aynı zamanda bir katılımcının bir yol noktasında kontrol yapmasını simüle etmek için bir metodları bulunmaktadır. Burada "waypt", yol noktasının numarasını temsil eder. 
id = checkWaypoint(id,42)

% Bir Etkinliği Simüle Etmek İçin Nesnelerin Vektörlerini Kullanma

% Bu kod, yol noktası sayılarının vektörlerini ve bir rota nesnesini oluşturur.
w1 = [42 123 124 163 168 666];
w2 = [42 112:123 666];

c = course("Family Fun","White",w1)
whos c


Task 1 % MATLAB'ın vektör tabanlı yapısını sürdürmek adına, bir etkinliği bir dizi parkur nesnesi ve bir dizi ID çubuğu olarak temsil etmek mantıklıdır.
c(2) = course("Insanity","Red",w2) % Şu anda c skalar (tek elemanlı) bir parkur nesnesidir.

Task 2 % Her idstick nesnesinin tek bir seri numarası vardır. Ancak, idstick fonksiyonunu bir dizi seri numarası ile çağırmak, her bir seri numarası için bir ID çubuğu oluşturacak şekilde bir dizi ID çubuğu oluşturacaktır.
id = idstick([123456,567890,987654])

Task 3 % Register fonksiyonuna girişlerin hepsi skalar olmalıdır. Ancak, bir nesne dizisine (obj(k)) diğer dizilerde olduğu gibi endeksleme yapabilirsiniz.
id(1) = register(id(1),"Astrid",c(1))

Task 4 % Birden fazla katılımcı, kendi ID çubuklarını kullanarak aynı anda aynı parkura kaydolabilir ve koşabilir.
id(2) = register(id(2),"Erik",c(1))

Task 5 % Kayıt işleminde olduğu gibi, ID çubukları da tek tek kontrol noktalarında kontrol edilir, bu nedenle checkWaypoint fonksiyonuna giden ilk giriş bir skalar idstick nesnesi olmalıdır.
id(1) = checkWaypoint(id(1),42)

*MODULE2.1*:
% Özel Sınıf Oluşturma


% Eğer bir sınıf tanımlama dosyanız (classname.m) varsa. Yeni bir değişken (OOP terimleriyle nesne) olan obj'yi classname türünde oluşturacaktır.
Task 2 
c = course

% Özel nesnelerinizin özelliklerinde depolanan değerlere erişmek için MATLAB'teki diğer nesnelerle aynı şekilde object.Property indeksleme yöntemini kullanabilirsiniz.

Task 3 
c = course
lvl = c.Level

% Özellik değerlerini değiştirmek için object.Property'ye atama yapabilirsiniz.

Task 4
c.Level = "White"

% Propertiylerimiz üzerinde kısıtlama yoktur, herhangi bir değeri veya veri türünü içerebilirler. 

Task 6
c.Level = 42
% Yeni bir sınıf oluşturmak için classname adında bir sınıf tanımlama bloğu içeren bir (düz metin) kod dosyası oluşturun. Bu dosyanın adı classname.m olmalıdır.
classdef course
    % Sınıfınızın özelliklerini, sınıf tanımlamasındaki bir properties bloğu içinde özellik isimlerini listeleyerek tanımlayabilirsiniz:
    properties
        Name
        Level
        Waypoints
    end 
end
*MODULE2.2*:
% Bir Sınıfı Diğerinin İçinde Kullanmak

% Bu kod, etkileşimde kullanılmak üzere bir kurs nesnesi oluşturur.
c = course;
c.Name = "Family Fun";
c.Level = "White";
c.Waypoints = [42 123 124 163 168 666]

% Id değişkeninine  idstick classını tanımladıktan sonra SerialNumber değişkeninin değerini atıyoruz

Task 1 
id = idstick
id.SerialNumber = 1234

% Bir nesnenin özelliğinin değeri, başka nesneler de dahil olmak üzere herhangi bir boyutta veya türde olabilir.

Task 2 
id.Course = c

% Nokta indeksleme kullanarak özellik değerlerini çıkarabilirsiniz. Eğer özellik başka bir nesne içeriyorsa, onun üzerinde de nokta indekslemeyi kullanabilirsiniz.

Task 3 
w = id.Course.Waypoints
% Kurs Class tanımı
classdef course
    properties
        Name
        Level
        Waypoints
    end
    
end

% Bir Classı Diğer Class ile kullanmak

% Sınıfınızın özelliklerini, sınıf tanımlamasındaki bir properties bloğu içinde özellik isimlerini listeleyerek tanımlayabilirsiniz

classdef idstick
    properties
        SerialNumber
        Status
        Participant
        Course
        Timestamps
    end
    
end
*MODULE2.3*:
% Fonksiyon Ekleme

%  Bu kod, etkileşimde kullanılmak üzere bir kurs nesnesi ve bir idstick nesnesi oluşturur.

c = course;
c.Name = "Family Fun";
c.Level = "White";
c.Waypoints = [42 123 124 163 168 666];

id = idstick;
id.SerialNumber = 1234



% idstick.m dosyasının içerisindeki register fonksiyonuna değişken yolluyoruz.

Task 1 
idout = register(id,"Erik",c)

% idstick.m dosyasındaki fonksiyonunun değişken isimlendirmelerini yapıyoruz. 
 
Task 2 
p1 = id.Participant
p2 = idout.Participant
% Fonksiyon Ekleme

% Bu kod, etkileşimde kullanılmak üzere bir kurs nesnesi ve bir idstick nesnesi oluşturur.
c = course;
c.Name = "Family Fun";
c.Level = "White";
c.Waypoints = [42 123 124 163 168 666];

id = idstick;
id.SerialNumber = 1234;
id.Course = c;
id.Status = "Ready"

% Herhangi bir işlevi çağırdığınız gibi, belirli bir nesne üzerinde bir yöntemi çağırabilirsiniz.

Task 1 
signal(id,true)

 % ID Stick Class tanımlaması



classdef idstick
    properties
        SerialNumber
        Status
        Participant
        Course
        Timestamps
    end
    
% Sınıfınızın metodlarını, sınıf tanımlamasındaki bir methods bloğu içinde standart fonksiyon bildirimi sözdizimini kullanarak tanımlayabilirsiniz. Bir metodun ilk girişi her zaman nesne olacaktır.

    methods
         function signal(id,ok)
            if ok
            % Nesne bir giriş olarak geçirildiği için, metod, düzenli nokta indeksleme kullanarak nesnenin tüm özelliklerine erişebilir.
            
                if (id.Status == "Ready") || (id.Status == "Done") 
                    disp("Beep beep")
                else
                    disp("Beep")
                end
            else
                disp("Buzz")
            end
        end

        % Daha Fazla Fonksiyon Ekleme
        
        function id = register(id,name,course)
            id.Participant = name;
            id.Course = course;
            
            %  register metodunun fiziksel bir ID çubuğunu temsil eden bir nesneyi güncellemesi amaçlanmıştır.
            id.Status = "Ready";
            signal(id,true)
        end
        
    end
    
end
*MODULE2.4*:
% Constructor kullanımı

% Bu kod, etkileşimde kullanılmak üzere bir kurs nesnesi ve bir idstick nesnesi oluşturur.
w = [42 123 124 163 168 666];

% idstick.m classımızın idstick isimli fonksiyonuna değer ataması yapıyoruz. 

Task 2 
id = idstick(54321)

% course.m classının içerisindeki course fonksiyonunun elemanlarının değerlerini atıyoruz.

Task 3 
c = course("Family Fun","White",w);

% Course sınıfı tanımı
classdef course
    properties
        Name
        Level
        Waypoints
    end

    methods
    
    % Course.m sınıf tanımı dosyasına, üç girdi alan ve bunları sırasıyla Ad, Seviye ve Yol Noktaları özelliklerine atayan bir yöntem bloğu ve bir yapıcı yöntemi ekleyelim.
    
        function c = course(name,lvl,waypts)
            c.Name = name;
            c.Level = lvl;
            c.Waypoints = waypts;
        end
    end
end

classdef idstick
    properties
        SerialNumber
        Status
        Participant
        Course
        Timestamps
    end

    methods
    
        % Sınıf adı sınıfına yönelik bir yapıcı yöntem genellikle şu forma sahip olacaktır:
    
        function id = idstick(snum)
            id.SerialNumber = snum;
        end
        

        function signal(id,ok)
            if ok
                if (id.Status == "Ready") || (id.Status == "Done")
                    disp("Beep beep")
                else
                    disp("Beep")
                end
            else
                disp("Buzz")
            end
        end

        function id = register(id,name,course)
            id.Participant = name;
            id.Course = course;
            id.Timestamps = NaT(size(course.Waypoints));
            id.Status = "Ready";
            signal(id,true)
        end
    end

end

*MODULE2.5*:
% Course sınıfı tanımı
classdef course
    properties
        Name
        Level
        Waypoints
    end

    methods
        function c = course(name,lvl,waypts)
            c.Name = name;
            c.Level = lvl;
            c.Waypoints = waypts;
        end

        function ok = checkWaypoint(c,id,wayptidx)
            % Get the index of the previous waypoint found
            [~,prevwpidx] = max(id.Timestamps);
            % Current waypoint should be the next one
            ok = (wayptidx == (1+prevwpidx));
        end

        % Özel bir disp yöntemi oluşturmanın standart bir yolu, göstermek istediğiniz biçimlendirilmiş bilgilerin bir dizesini oluşturmak ve ardından bu dizede disp işlevini çağırmaktır.
        
        function disp(c) 
            str = c.Level + " course '" + c.Name + "' with " + ...
                numel(c.Waypoints) + " waypoints";
            disp(str)
        end
    end

end
% ID Stick sınıf tanımı
classdef idstick
    properties
        SerialNumber
        Status
        Participant
        Course
        Timestamps
    end

    methods
        function id = idstick(snum)
            id.SerialNumber = snum;
        end
        
        function signal(id,ok)
            if ok
                if (id.Status == "Ready") || (id.Status == "Done")
                    disp("Beep beep")
                else
                    disp("Beep")
                end
            else
                disp("Buzz")
            end
        end

        function id = register(id,name,course)
            id.Participant = name;
            id.Course = course;
            id.Timestamps = NaT(size(course.Waypoints));
            id.Status = "Ready";
            signal(id,true)
        end

        function id = checkWaypoint(id,wayptnum)
            % Course objesini çağırır
            c = id.Course;
            % ID Stick öğesini kontrol eder ve günceller
            % Waypoint bu course nesnesinde varmı diye kontrol eder
            [id,ok,n] = updateStatus(id,wayptnum);
            % Waypoint öğesi bulunursa, ID stick durumunu var olarak değiştirir , ve the
            % waypoint eğer başlamazsa , course methodunu kotnrol için çağırıp
            % wayppoint kuralların göre başlar. (Waypoint eğer başlarsa
            % , kontrol edecek daha fazla birşey yoktur.)
            if ok && (n > 1)
                ok = checkWaypoint(c,id,n);
            end
            % Waypointin ara noktasını günceller.
            id.Timestamps(n) = datetime("now");
            % Kullanıcıya ne işlemi aktarır
            signal(id,ok)
        end

        function [id,ok,idx] = updateStatus(id,wayptnum)
            % Bu nesnedeki waypoint öğesini bulur
            wplist = id.Course.Waypoints;
            idx = find(wayptnum == wplist,1,"first");
            % Şuanki Id'sinin ne olduğunu bulur.
            if (id.Status == "Error") || (id.Status == "Done")
                % Durumu aynı bırakır eğer koşullar geçerli ise
                ok = false;
            elseif (id.Status == "Ready")
                % Waypoint başlamaya hazır.
                if (idx == 1)
                    % Waypoint başladı
                    id.Status = "Running";
                    ok = true;
                else
                    % waypoint başlamadan önce kontrol eder.
                    ok = false;
                end
            else
                %  Çalışma esnasında waypointin bu nesnede olup olmadıgına bakar
                ok = ~isempty(idx);
                % Waypoint bittiyse iş bitti demektir.
                if (idx == numel(wplist))
                    id.Status = "Done";
                end
            end
        end
    end

end

% 2 Objenin Simülasyonu

w1 = [42 123 124 163 168 666];
c1 = course("Family Fun","White",w1)

w2 = [42 112:123 666];
c2 = course("Insanity","Red",w2)

Create two ID sticks
id1 = idstick(123456);
id2 = idstick(987654);

Register a participant
id1 = register(id1,"Astrid",c1);

Simulate running the course
id1 = checkWaypoint(id1,42);
id1 = checkWaypoint(id1,123);
id1 = checkWaypoint(id1,124);
% Eğer waypoint kayıpsa işlem tamamlanamaz.
id1 = checkWaypoint(id1,168);
% işlem devam eder.
id1 = checkWaypoint(id1,666)

*MODULE3.2*:
% Course class tanımlaması
classdef course
    properties

        % Bir özelliğin nasıl saklanması gerektiğini belirtmek için, özellik adından sonra veri türünün adını ekleyebilirsiniz.
        % Verilerin beklenen boyutunu belirtmek için özellik adından sonra (ve herhangi bir tür belirtiminden önce) boyutlar ekleyebilirsiniz. Herhangi bir boyutta (belirli bir boyutta) bir dizi belirtmek için : kullanılır.
        
        Name (1,1) string 
        Level (1,1) string {mustBeMember(Level,["White","Yellow","Green","Orange","Red"])} = "White"    % Şu anda zorluk seviyesi herhangi bir skaler dizi olabilir. Bir özellik değerinin onaylanmış bir listeden olduğundan emin olmak için mustBeMember doğrulama işlevini kullanabilirsiniz.
        Waypoints (:,1) double  {mustBePositive, mustBeInteger} % Yol noktaları sayısal bir vektör olarak saklanır. Ancak ara nokta numaraları yalnızca pozitif tam sayılar olduklarında anlamlıdır.  
    end

    methods
        function c = course(name,lvl,waypts)
            c.Name = name;
            c.Level = lvl;
            c.Waypoints = waypts;
        end

        function ok = checkWaypoint(c,id,wayptidx)
            % Get the index of the previous waypoint found
            [~,prevwpidx] = max(id.Timestamps);
            % Current waypoint should be the next one
            ok = (wayptidx == (1+prevwpidx));
        end

        function disp(c)
            str = c.Level + " course '" + c.Name + "' with " + ...
                numel(c.Waypoints) + " waypoints:";
            disp(str)
            disp(c.Waypoints)
        end
    end

end

% Özellik Türlerini Ayarlama

% Geçerli girişlerle test edin

w = [42 123 124 163 168 666];
c = course("Family Fun",'Yellow',w)

nameout = c.Name
levelout = c.Level
wout = c.Waypoints

whos w nameout levelout wout

% Geçersiz(?) girişlerle test edin
w = [-12;0;123;NaN];
c2 = course(42,'Banana',w)

nameout = c2.Name
levelout = c2.Level
wout = c2.Waypoints

whos w nameout levelout wout

*MODULE3.3*:
% Course sınıfı tanımlaması
classdef course
    properties
        Name (1,1) string
        Level (1,1) string {mustBeMember(Level,["White","Yellow","Green","Orange","Red"])} = "White"
        Waypoints (:,1) double {mustBePositive, mustBeInteger}
    end

    methods
        function c = course(name,lvl,waypts)

            % Giriş doğrulaması gerçekleştirmek için işlevinizin başına bir argüman bloğu ekleyin. 
            arguments
                name {mustBeText}
                lvl
                waypts {mustBeNumeric}
            end
            c.Name = name;
            c.Level = lvl;
            c.Waypoints = waypts;
        end

        function ok = checkWaypoint(c,id,wayptidx)
            % Get the index of the previous waypoint found
            [~,prevwpidx] = max(id.Timestamps);
            % Current waypoint should be the next one
            ok = (wayptidx == (1+prevwpidx));
        end

        function disp(c)
            str = c.Level + " course '" + c.Name + "' with " + ...
                numel(c.Waypoints) + " waypoints:";
            disp(str)
            disp(c.Waypoints')
        end
    end

end

% Geçersiz Girişleri Kısıtlama

% Geçerli girişlerle test edin (çalışması gerekir)

w = [42 123 124 163 168 666];
c1 = course("Family Fun",'Yellow',w)

c2 = course('Crazy time',"Red",10:20)

% Geçersiz girişlerle test edin (başarısız olmalıdır)

% Numeric name
c3 = course(42,"White",w)

% String waypoint values
c4 = course('Name OK',"Orange",["42" "123" "666"])

MODLUE 3.4
% Course Constructor
% Üçlü İnput

w1 = [42 123 124 163 168 666];
c1 = course("Family Fun","White",w1)

w2 = [42 112:123 666];
c2 = course("Insanity","Red",w2)

Create two ID sticks
id1 = idstick(123456);
id2 = idstick(987654);

Register a participant
id1 = register(id1,"Astrid",c1);

Simulate running the course
id1 = checkWaypoint(id1,42);
id1 = checkWaypoint(id1,123);
id1 = checkWaypoint(id1,124);
% Eğer waypoint kayıpsa işlem tamamlanamaz.
id1 = checkWaypoint(id1,168);
% işlem devam eder.
id1 = checkWaypoint(id1,666)

% Fixing the course constructor

% Course sınıfı tanımlama
classdef course
    properties
        Name (1,1) string
        Level (1,1) string {mustBeMember(Level,["White","Yellow","Green","Orange","Red"])} = "White"
        Waypoints (:,1) double {mustBePositive, mustBeInteger}
    end

    methods
        function c = course(name,lvl,waypts)
            if (nargin == 3) % Nargin işlevi, işlev çağrıldığında verilen giriş sayısını döndürür.
                c.Name = name;
                c.Level = lvl;
                c.Waypoints = waypts;
            elseif (nargin > 0) % Hata işleviyle özel hata mesajları oluşturabilirsiniz.
                error("You need to provide 3 inputs: name, level, and a list of waypoints")
            end
            end
        end

        function ok = checkWaypoint(c,id,wayptidx)
            % Bir önceki Waypointin indexini bulur
            [~,prevwpidx] = max(id.Timestamps);
            %  Şunki waypointin bir sonraki waypoint olmasını sağlar
            ok = (wayptidx == (1+prevwpidx));
        end

%         function disp(c)
%             str = c.Level + " course '" + c.Name + "' with " + ...
%                 numel(c.Waypoints) + " waypoints:";
%             disp(str)
%             disp(c.Waypoints')
%         end
    end

end

% ID Stick sınıf tanımı
classdef idstick
    properties
        SerialNumber
        Status
        Participant
        Course
        Timestamps
    end

    methods
        function id = idstick(snum)
            id.SerialNumber = snum;
        end
        
        function signal(id,ok)
            if ok
                if (id.Status == "Ready") || (id.Status == "Done")
                    disp("Beep beep")
                else
                    disp("Beep")
                end
            else
                disp("Buzz")
            end
        end

        function id = register(id,name,course)
            id.Participant = name;
            id.Course = course;
            id.Timestamps = NaT(size(course.Waypoints));
            id.Status = "Ready";
            signal(id,true)
        end

        function id = checkWaypoint(id,wayptnum)
            % Course objesini çağırır
            c = id.Course;
            % ID Stick öğesini kontrol eder ve günceller
            % Waypoint bu course nesnesinde varmı diye kontrol eder
            [id,ok,n] = updateStatus(id,wayptnum);
            % Waypoint öğesi bulunursa, ID stick durumunu var olarak değiştirir , ve the
            % waypoint eğer başlamazsa , course methodunu kotnrol için çağırıp
            % wayppoint kuralların göre başlar. (Waypoint eğer başlarsa
            % , kontrol edecek daha fazla birşey yoktur.)
            if ok && (n > 1)
                ok = checkWaypoint(c,id,n);
            end
            % Waypointin ara noktasını günceller.
            id.Timestamps(n) = datetime("now");
            % Kullanıcıya ne işlemi aktarır
            signal(id,ok)
        end

        function [id,ok,idx] = updateStatus(id,wayptnum)
            % Bu nesnedeki waypoint öğesini bulur
            wplist = id.Course.Waypoints;
            idx = find(wayptnum == wplist,1,"first");
            % Şuanki Id'sinin ne olduğunu bulur.
            if (id.Status == "Error") || (id.Status == "Done")
                % Durumu aynı bırakır eğer koşullar geçerli ise
                ok = false;
            elseif (id.Status == "Ready")
                % Waypoint başlamaya hazır.
                if (idx == 1)
                    % Waypoint başladı
                    id.Status = "Running";
                    ok = true;
                else
                    % waypoint başlamadan önce kontrol eder.
                    ok = false;
                end
            else
                %  Çalışma esnasında waypointin bu nesnede olup olmadıgına bakar
                ok = ~isempty(idx);
                % Waypoint bittiyse iş bitti demektir.
                if (idx == numel(wplist))
                    id.Status = "Done";
                end
            end
        end
    end

end

% Kurs Nesnelerinden Bir Vektör Oluşturma

% Bu kod ara noktaların vektörlerini tanımlar ve bir rota nesnesi oluşturur.

w1 = [42 123 124 163 168 666];
w2 = [42 123:127 144:146 666];
w3 = [42 163:174 666];
c = course("Family Fun","White",w1)

% MATLAB'ın dizi tabanlı doğasına uygun olarak, bir oryantiring olayını parkur nesnelerinden oluşan bir vektörle simüle etmek mantıklı olacaktır. 

Task 2  
c(2) = course("Challenge","Orange",w2)

*MODULE3.5*:
% Property erişimi 


% Course öğesi oluşturma
w = [42 123 124 163 168 666];

c = course("Family Fun","White",w)

level = c.Level
wout = c.Waypoints

But not modified

c.Level = "Yellow"

ID Stick
id = idstick(12345)

Property access
sn = id.SerialNumber

id.SerialNumber = 54321

id.Course = course("Shouldn't Be Allowed","Red",5:10)

Methods can still access & modify properties
id = register(id,"Erik",c)

The Status property can be invisible to the user

s = id.Status

Restrict access to some methods

id = updateStatus(id,124)


signal(id,false)

% Course class definition
classdef course
    properties (SetAccess = private) % Bu söz dizimi ile properties niteliklerini ayarlayabilirsiniz
        Name (1,1) string
        Level (1,1) string {mustBeMember(Level,["White","Yellow","Green","Orange","Red"])} = "White"
        Waypoints (:,1) double {mustBePositive, mustBeInteger}
    end

    methods
        function c = course(name,lvl,waypts)
            if (nargin == 3)
                name = convertCharsToStrings(name);
                if isstring(name)
                    c.Name = name;
                else
                    error("Name must be text")
                end
                c.Level = lvl;
                if isnumeric(waypts)
                    c.Waypoints = waypts;
                else
                    error("Waypoints must be numeric")
                end
            elseif (nargin > 0)
                error("You need to provide 3 inputs: name, level, and a list of waypoints")
            end
        end

        function ok = checkWaypoint(c,id,wayptidx)

            [~,prevwpidx] = max(id.Timestamps);
            % Current waypoint should be the next one
            ok = (wayptidx == (1+prevwpidx));
        end

        function disp(c)
            n = numel(c);
            isarray = (n > 1);
            if isarray
                disp("Array of "+n+" courses"+newline)
            end
            for k = 1:n
                if isarray
                    str = string(k)+") ";
                else
                    str = "";
                end
                if isempty(c(k).Waypoints)
                    str = str + "Empty course";
                    disp(str)
                else
                    str = str + c(k).Level + " course '" + c(k).Name + ...
                        "' with " + numel(c(k).Waypoints) + " waypoints:";
                    disp(str)
                    disp(c(k).Waypoints')
                end
            end
        end
    end

end

% ID Stick sınıfı tanımlaması
classdef idstick
    properties (SetAccess = immutable) % Genellikle farklı propertiesler için farklı erişim düzeyleri isteyeceksiniz. Her biri kendi öznitelik ayarlarına sahip, ihtiyaç duyduğunuz kadar çok özellik bloğuna sahip olabilirsiniz.
        SerialNumber (1,1) uint32
    end
    properties (Access = private) % Access niteliğini özel yapmak, bu özelliklerin aslında kullanıcı tarafından görülemeyeceği anlamına gelir. Bu, bir iç durumu temsil eden özellikler için yararlı olabilir.
        Status (1,1) string
    end
    properties (SetAccess = private) % Bu söz dizimi ile properties niteliklerini ayarlayabilirsiniz:
        SerialNumber (1,1) uint32
        Status (1,1) string
        Participant (1,1) string
        Course (1,1) course
        Timestamps (:,1) datetime
    end

    methods
        function id = idstick(snum)
            if (nargin > 0)
                mustBeNumeric(snum)
                mustBeInteger(snum)
                mustBePositive(snum)
                for k = 1:numel(snum)
                    id(k).SerialNumber = snum(k);
                end
            end
        end

        function disp(id)
            for k = 1:numel(id)
                str = "ID stick #" + id(k).SerialNumber;
                if (id(k).Participant == "")
                    str = str + " which is not yet registered";
                    disp(str)
                else
                    str = str + " is registered to " + id(k).Participant + " who is ";
                    switch id(k).Status
                        case "Ready"
                            str = str + "ready to run";
                        case "Running"
                            str = str + "running";
                        case "Done"
                            str = str + "finished with";
                    end
                    disp(str)
                    disp(id(k).Course)
                end
            end
        end

        function signal(id,ok)
            if ok
                if (id.Status == "Ready") || (id.Status == "Done")
                    disp("Beep beep")
                else
                    disp("Beep")
                end
            else
                disp("Buzz")
            end
        end

        function id = register(id,name,c)
            arguments
                id (1,1) idstick
                name (1,1) string
                c (1,1) course
            end
            id.Participant = name;
            id.Course = c;
            id.Timestamps = NaT(size(c.Waypoints));
            id.Status = "Ready";
            signal(id,true)
        end

        function id = checkWaypoint(id,wayptnum)
            arguments
                id (1,1) idstick
                wayptnum (1,1) double
            end
            c = id.Course;
            [id,ok,n] = updateStatus(id,wayptnum);
            if ok && (n > 1)
                ok = checkWaypoint(c,id,n);
            end
            id.Timestamps(n) = datetime("now");
            signal(id,ok)
        end
    end
    
         methods (Access = private) % Özelliklerde olduğu gibi, kullanıcılarınızın onlarla nasıl etkileşimde bulunabileceğini kontrol etmek için yöntemlerinizin niteliklerini ayarlayabilirsiniz.
            function signal(id,ok)
                if ok
                    if (id.Status == "Ready") || (id.Status == "Done")
                        disp("Beep beep")
                    else
                        disp("Beep")
                    end
                else
                    disp("Buzz")
                end
            end

        function [id,ok,idx] = updateStatus(id,wayptnum)
            wplist = id.Course.Waypoints;
            idx = find(wayptnum == wplist,1,"first");
            if (id.Status == "Error") || (id.Status == "Done")
                ok = false;
            elseif (id.Status == "Ready")
                if (idx == 1)
                    id.Status = "Running";
                    ok = true;
                else
                    ok = false;
                end
            else
                ok = ~isempty(idx);
                if (idx == numel(wplist))
                    id.Status = "Done";
                end
            end
        end
    end
end

end
